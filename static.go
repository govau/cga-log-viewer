// Code generated by go-bindata.
// sources:
// data/apps.html
// data/denied.html
// data/index.html
// data/job.html
// data/logs.html
// data/orgs.html
// data/spaces.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAppsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbf\x8a\xc3\x30\x0c\xc6\xf7\x7b\x0a\x91\x07\x88\xf6\x43\x67\xb8\xe9\xb6\x5b\x3b\xbb\x58\x89\x0d\x8a\x2d\x12\x87\x52\x8c\xdf\xbd\xb8\xa6\x24\xa5\x9e\xbe\xcf\xfa\xe9\x2f\xf9\xbc\x88\xf9\x02\x00\x20\xcf\xd6\x75\xf9\xb4\x39\x64\x61\xf3\xab\xba\x11\x76\xdd\x31\x3c\x38\xba\x26\x77\x3f\xa5\xa8\xb9\x30\x4c\x69\x8f\x0e\xb2\x6f\x4a\x24\xdd\x42\x9c\xc1\xaa\x6e\xdf\x84\x7a\x62\x77\x39\x4c\x7b\xa5\xc0\x6a\xe3\xcc\x30\x36\x18\x6a\x7d\x8b\x92\x04\x43\x16\xfc\xca\xd3\xcf\x80\x56\x15\x4b\x81\xf1\x6f\x0f\x0e\x6a\x45\x49\xf3\x36\x98\xf6\xf3\x6f\x17\x86\x5a\x09\xad\x21\x94\xf0\xd1\x82\xa3\x3b\x97\x26\x7c\x8d\x41\xd8\x77\x21\xec\x17\x79\x04\x00\x00\xff\xff\xb5\x73\xd6\x72\x19\x01\x00\x00")

func dataAppsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAppsHtml,
		"data/apps.html",
	)
}

func dataAppsHtml() (*asset, error) {
	bytes, err := dataAppsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/apps.html", size: 281, mode: os.FileMode(420), modTime: time.Unix(1549596371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDeniedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6a\x33\x31\x0c\x84\xef\xff\x53\x0c\xb9\xfc\x2d\xb4\x59\x72\x5f\x16\x42\xa1\xd0\x53\x7b\xe9\x03\x38\xb6\xb6\x16\x68\x25\x63\xd9\x09\x7e\xfb\xd2\x6e\x0f\xb9\x49\x30\xcc\xcc\x37\x73\x6e\x9b\x2c\xff\x00\x60\xbe\x58\x1a\xfb\xf9\xfb\xe6\xd3\xf2\x41\x75\x63\x77\x36\x45\x22\x65\x4a\xf3\x94\x4f\x77\x92\xb2\x7c\x6a\xb8\x08\xa1\x19\xbc\xc7\x48\xee\x6b\x17\x19\x88\xb6\x15\xa1\x46\x78\x3f\xf7\x96\xb1\x8a\xdd\x70\xe3\x96\xf1\x22\xd6\xd3\xab\x75\x4d\x75\x1c\xf1\xb6\x62\x58\xff\x5f\x09\xa5\xd2\x95\xad\xbb\x0c\x24\xf6\x68\xaa\x14\x1b\x25\xb4\xcc\x8e\x50\x8a\x70\x0c\x8d\x4d\x9f\x50\x84\x82\x13\xc4\xbe\x58\x7f\x72\xef\x1d\x11\x34\xa1\xd2\x33\xed\xad\xb8\xe1\xa1\x6b\xa2\x8a\xc3\xb9\x94\x6a\xd7\x20\x7e\x78\x3c\xce\x53\xf9\x23\x9e\x76\xe4\x79\xda\x57\xf8\x0e\x00\x00\xff\xff\xef\x7c\x84\x74\x0d\x01\x00\x00")

func dataDeniedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDeniedHtml,
		"data/denied.html",
	)
}

func dataDeniedHtml() (*asset, error) {
	bytes, err := dataDeniedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/denied.html", size: 269, mode: os.FileMode(420), modTime: time.Unix(1549596085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x4a\x03\x31\x10\x86\xef\x3e\xc5\x6f\x4f\x0a\xd2\xe0\x7d\x1a\x11\x51\x3c\xf4\x0d\xc4\x43\x34\x69\x76\x60\xba\x53\x92\xc9\xa1\xd6\xbe\xbb\x74\x83\xee\x82\xb7\xfc\x3f\x5f\xbe\x64\x86\x06\xdb\x8b\xbf\x02\x00\x1a\x52\x88\xfd\x38\x45\x63\x93\xe4\xb7\x9a\x2b\x4c\x55\xc8\xf5\xa2\xb3\x6e\x86\xe9\x43\xe3\x71\x71\xef\xe0\x5f\x19\xa7\x13\xd6\xad\xa6\xb2\x7e\xde\x07\x96\xc7\x18\x4b\xaa\x15\xe7\xf3\x1d\x8e\xda\x10\x4a\x82\x68\xce\x29\x82\xc7\x6b\xbc\x81\x02\x86\x92\x76\x9b\x95\x13\xcd\xda\x6c\x75\x79\x57\x9b\xe1\xc6\x06\xae\xb7\xe4\x82\xc7\xf7\x3f\xea\xe1\x73\xb7\xb9\xff\x43\x9f\x5e\x26\xec\x9d\xdc\x61\xf1\x9b\x26\x73\x98\x0a\x61\x3f\x7b\xb4\xe4\xba\xf2\x5b\xae\x06\x2d\x39\x8c\xfc\x15\x8c\x75\xac\x17\x13\x39\xe1\x85\xc8\xfd\x9a\xc8\xf5\x81\xc9\xf5\xdd\xfd\x04\x00\x00\xff\xff\x2e\xcb\x82\xfd\x43\x01\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 323, mode: os.FileMode(420), modTime: time.Unix(1549596326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataJobHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xbd\x4e\x03\x31\x10\x84\x7b\x9e\x62\x74\x3d\x76\x95\x06\x6d\xdc\x50\x81\xa8\x78\x83\x5c\x6e\x2f\xe7\xe8\x6e\xd7\xf8\x16\x24\x64\xf9\xdd\x51\x62\x91\x1f\x4a\xba\xb1\x67\x34\xfb\xed\xd2\x64\xcb\x1c\x1e\x00\x80\x26\xde\x0d\x4d\x9e\x9f\x16\x6d\xe6\xf0\xaa\x3d\xf9\x26\x2f\x56\x29\x88\x23\x44\x0d\xee\xa8\xfd\x8b\x8c\xea\x9e\x75\x49\x33\x1b\xa3\xd6\x4b\xec\xdc\xb2\xb0\xed\x30\x99\xa5\x47\xfe\xf8\x8c\x5f\xdb\x2e\xf3\x98\x79\x9d\x3a\xec\x55\x8c\xc5\xb6\xdd\xa6\x83\xbf\x2b\x67\x19\x7e\x7b\xc8\x5f\xa9\xa8\xd7\xe1\xfb\x06\x30\x85\x37\x3d\x60\xd4\x8c\xa3\xf6\x4f\xe4\xd3\xad\x97\x39\x94\x72\xe5\x3b\x25\x6b\x25\x7f\xfa\xff\xd7\x1e\x29\xbc\x37\xf0\x28\x07\x44\xc1\x06\x2b\xef\x55\x86\xd5\x39\x77\x37\xfa\x2f\x7f\x83\x26\xdf\x0e\xfd\x13\x00\x00\xff\xff\x62\x90\x68\xa7\x70\x01\x00\x00")

func dataJobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataJobHtml,
		"data/job.html",
	)
}

func dataJobHtml() (*asset, error) {
	bytes, err := dataJobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/job.html", size: 368, mode: os.FileMode(420), modTime: time.Unix(1549596085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLogsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\xd4\x30\x10\xbd\xf3\x2b\x46\x3e\xc1\x81\x18\x2a\x0e\x08\x39\x41\x1c\x0a\x9c\xca\x37\x77\x67\xfd\x9a\x58\x4a\xe2\x30\x76\xba\x5d\xad\xf2\xdf\x51\xec\x56\x1b\x77\x3f\x9a\x53\x3c\x1f\x6f\xde\x9b\x67\x59\xb5\xa1\xef\xaa\x17\x44\x44\xaa\x85\x36\xe9\x37\x1e\x83\x0d\x1d\xaa\xbf\x16\x5b\xea\x5c\xe3\x95\x4c\x81\x54\x2b\x0f\xc5\xaa\x76\x66\xb7\xea\x1b\xab\xeb\x7b\x6c\xa6\x80\xd8\x46\xff\x26\xf0\x8e\x74\xa3\xed\xe0\x03\xa9\xba\xda\xef\xa9\xd0\xe3\x58\xdc\xe8\x1e\x34\xcf\xf4\x9a\x5e\x3e\x86\xbe\x4c\xd6\xd0\x3c\xbf\x52\xb2\xae\x3e\x2a\x39\xae\x50\x5b\x96\xeb\xd3\x55\xf5\x63\xc1\x55\xb2\xbd\xca\x47\x0f\x01\x4c\xa1\xc5\xc3\xdc\xe0\x08\x89\x4d\x41\x37\x2e\x80\xfc\xb4\x69\x63\xce\xc2\x53\xaf\x77\x54\x47\x9e\x0d\x0c\xe9\xc1\x10\xe3\xce\x62\x0b\x53\xe4\xd3\x6f\x1d\xf7\xd4\x23\xb4\xce\x94\xe2\xfb\xb7\x5f\xbf\xc5\x21\xb9\x7c\x8b\x80\x8d\xe7\xdb\xcf\x16\xdd\xa2\x20\x4b\xaa\x80\xfb\xa0\x19\x9a\x06\xdd\xa3\x14\x91\x99\x20\x76\xdb\x52\xbc\x13\xb4\x71\x9d\x2f\xc5\xfb\x37\x22\x6e\x26\xd1\x9e\x67\x25\x1f\xbb\xf2\x49\xaa\x66\x92\x79\xe8\x8f\x07\x2f\xc8\x1f\x22\x8d\xc9\x83\x8b\xeb\x5e\xdb\xee\x93\x31\x0c\xef\x97\x1d\x2b\x3b\x8c\x53\xa0\xb0\x1b\x51\x0a\x3f\xd5\xbd\x0d\x82\xee\x74\x37\xa1\x14\x0f\x6e\x89\x35\xac\x92\x8b\xe2\x6c\xfd\x59\x7a\x64\x44\xb6\x3d\xbc\xd7\x0d\x22\xdf\x25\xf6\x6c\x03\xfc\x41\x60\xd6\xb0\xdf\x13\xeb\xa1\x01\x15\x0c\x3f\x75\xc1\x1f\x6f\x51\xd7\x1d\xa8\x76\x6c\xc0\xa5\x78\xfb\xc4\x81\x54\xc2\xc7\xc1\x1c\xfc\x2b\xb4\x01\x1f\x81\xe7\x28\x6d\xa4\x9a\x4c\x68\xcf\x22\x62\x38\x72\x3a\xad\xee\x14\x8b\x03\x83\x9f\x6e\x7b\x76\xfc\x59\x01\x39\xc4\x25\xf6\x09\xc6\xac\x14\x98\x8b\x90\x67\x54\x5c\x54\x72\xa2\x47\xc9\x68\x4f\xe6\xe7\x93\xb2\xd5\x95\x50\x32\xbd\x19\x4a\xa6\xe7\xe7\x7f\x00\x00\x00\xff\xff\x46\xfa\x15\xce\x86\x04\x00\x00")

func dataLogsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLogsHtml,
		"data/logs.html",
	)
}

func dataLogsHtml() (*asset, error) {
	bytes, err := dataLogsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/logs.html", size: 1158, mode: os.FileMode(420), modTime: time.Unix(1550532722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOrgsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xbb\x8e\xc3\x20\x10\xec\xef\x2b\x56\xfe\x00\x6f\x7f\xda\xa3\xbd\xee\xae\x4c\xbd\x09\x6b\x40\xc2\x60\x01\x56\x94\x20\xfe\x3d\x72\x50\x64\x47\xa1\x9a\x19\x66\xf6\x45\xb6\xcc\x5e\x7d\x01\x00\x90\x15\xd6\x1d\x3e\x69\x71\xc5\x8b\xfa\x4f\x86\x83\xbb\x73\x71\x31\x64\xc2\x2e\x76\x3f\xee\x01\x3a\x47\x7d\x3b\x64\x17\x75\x12\x98\xe2\x1a\x34\x14\xbb\x21\xef\xe3\xd5\x05\x03\x31\x99\x6f\xc2\xe5\x60\x5d\xfd\x4e\xb6\x57\x2b\x24\x0e\x46\x60\x8c\xc9\x64\x68\xed\xed\x97\xbc\x53\xc4\x60\x93\x4c\x3f\x03\xc6\x64\xb0\x56\x18\x7f\x57\xa7\xa1\x35\xcc\x0b\x5f\x24\x0f\x6a\xd3\xfe\x78\x16\x68\x8d\x90\x15\xa1\x77\x1f\x4d\x24\xe8\x63\x71\xc2\xd7\x20\x84\x7d\x19\xc2\x7e\x9b\x47\x00\x00\x00\xff\xff\xbc\x72\x1f\x6b\x23\x01\x00\x00")

func dataOrgsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataOrgsHtml,
		"data/orgs.html",
	)
}

func dataOrgsHtml() (*asset, error) {
	bytes, err := dataOrgsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/orgs.html", size: 291, mode: os.FileMode(420), modTime: time.Unix(1549596085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSpacesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3d\xae\xc3\x20\x10\x84\xfb\x77\x8a\x91\x0f\xe0\xed\x9f\x36\xb4\xe9\xd2\xa4\x48\x4d\xc2\xda\x20\x61\x8c\x6c\xac\x28\x42\xdc\x3d\xb2\x51\x64\x47\xa1\x9a\x81\x8f\xd9\x1f\xb6\x69\xf0\xea\x0f\x00\xd8\x8a\x36\x55\x6e\x36\xb9\xe4\x45\x5d\xa3\x7e\xc8\xcc\x54\x5d\x05\x69\x27\xf9\x3e\x9a\xd7\xe1\x53\x54\x37\x41\x37\x2e\xc1\x20\xd9\x55\x79\x3f\x3e\x5d\xe8\x31\x6f\x39\xff\x4c\xf1\x40\x2f\x7e\x37\xeb\xc9\x19\x93\x0e\xbd\xa0\xad\x38\x4a\xf9\x7a\x67\xef\x14\x6b\xd8\x49\xba\x53\x43\x1b\x43\x39\xa3\x3d\x2f\xce\xa0\x14\xd2\x31\xce\x8d\x5a\x6f\x2e\x7a\x10\x94\xc2\xa4\x15\x93\x77\x3f\x65\x24\x98\x63\x38\xd3\xa7\x15\xa6\x3a\x11\x53\xdd\xcc\x3b\x00\x00\xff\xff\x9c\x21\xae\x3e\x21\x01\x00\x00")

func dataSpacesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSpacesHtml,
		"data/spaces.html",
	)
}

func dataSpacesHtml() (*asset, error) {
	bytes, err := dataSpacesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/spaces.html", size: 289, mode: os.FileMode(420), modTime: time.Unix(1549596085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/apps.html": dataAppsHtml,
	"data/denied.html": dataDeniedHtml,
	"data/index.html": dataIndexHtml,
	"data/job.html": dataJobHtml,
	"data/logs.html": dataLogsHtml,
	"data/orgs.html": dataOrgsHtml,
	"data/spaces.html": dataSpacesHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"apps.html": &bintree{dataAppsHtml, map[string]*bintree{}},
		"denied.html": &bintree{dataDeniedHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"job.html": &bintree{dataJobHtml, map[string]*bintree{}},
		"logs.html": &bintree{dataLogsHtml, map[string]*bintree{}},
		"orgs.html": &bintree{dataOrgsHtml, map[string]*bintree{}},
		"spaces.html": &bintree{dataSpacesHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

