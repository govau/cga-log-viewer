// Code generated by go-bindata.
// sources:
// data/apps.html
// data/denied.html
// data/execute.html
// data/index.html
// data/job.html
// data/logs.html
// data/operations.html
// data/orgs.html
// data/services.html
// data/spaces.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAppsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4b\x05\x31\x10\x84\x7b\x7f\xc5\x70\x95\x36\x6f\x7b\x59\x03\x56\x36\x62\x6b\x1d\xcd\xbe\xbb\xc0\xbe\xcb\x72\xb9\x53\x24\xe4\xbf\x4b\x5e\x90\x3b\x11\x53\xcd\x64\xbf\x81\xd9\xe5\x69\xbd\xa8\xbb\x01\x00\x9e\xc4\x87\x2e\xaf\x76\x8d\xab\x8a\x7b\x34\xcb\x4c\x5d\x77\x8c\x76\x8e\xdf\x52\xf8\x3a\x44\xcc\xbd\x0a\xce\x69\x9b\x03\xd6\xa9\x29\xd5\xf4\x19\xe7\x11\xde\x2c\xdf\x33\xd9\x81\xdd\x74\x37\xed\x95\x82\xc5\xcf\xa3\xe0\xd4\x60\xd4\xfa\x6b\xca\x1a\x1d\x7b\x4c\x8b\x9c\x1f\x06\xf2\x66\x54\x0a\x4e\x4f\x5b\x0c\xa8\x95\xb2\x2c\x1f\xf1\x5d\xf2\xe0\xda\xef\x8b\xbf\x08\x6a\x65\xf2\x0e\xb7\xf8\x3f\xa5\x69\xcc\x83\x7b\x4e\x63\xbe\xa2\x77\x4c\x1a\xff\x74\x92\x39\x1c\xbb\x30\xfd\xf4\x66\xea\xcb\x33\xf5\x13\x7e\x07\x00\x00\xff\xff\x0c\xd4\xe5\xeb\x4a\x01\x00\x00")

func dataAppsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAppsHtml,
		"data/apps.html",
	)
}

func dataAppsHtml() (*asset, error) {
	bytes, err := dataAppsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/apps.html", size: 330, mode: os.FileMode(420), modTime: time.Unix(1549594481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDeniedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6a\x33\x31\x0c\x84\xef\xff\x53\x0c\xb9\xfc\x2d\xb4\x59\x72\x5f\x16\x42\xa1\xd0\x53\x7b\xe9\x03\x38\xb6\xb6\x16\x68\x25\x63\xd9\x09\x7e\xfb\xd2\x6e\x0f\xb9\x49\x30\xcc\xcc\x37\x73\x6e\x9b\x2c\xff\x00\x60\xbe\x58\x1a\xfb\xf9\xfb\xe6\xd3\xf2\x41\x75\x63\x77\x36\x45\x22\x65\x4a\xf3\x94\x4f\x77\x92\xb2\x7c\x6a\xb8\x08\xa1\x19\xbc\xc7\x48\xee\x6b\x17\x19\x88\xb6\x15\xa1\x46\x78\x3f\xf7\x96\xb1\x8a\xdd\x70\xe3\x96\xf1\x22\xd6\xd3\xab\x75\x4d\x75\x1c\xf1\xb6\x62\x58\xff\x5f\x09\xa5\xd2\x95\xad\xbb\x0c\x24\xf6\x68\xaa\x14\x1b\x25\xb4\xcc\x8e\x50\x8a\x70\x0c\x8d\x4d\x9f\x50\x84\x82\x13\xc4\xbe\x58\x7f\x72\xef\x1d\x11\x34\xa1\xd2\x33\xed\xad\xb8\xe1\xa1\x6b\xa2\x8a\xc3\xb9\x94\x6a\xd7\x20\x7e\x78\x3c\xce\x53\xf9\x23\x9e\x76\xe4\x79\xda\x57\xf8\x0e\x00\x00\xff\xff\xef\x7c\x84\x74\x0d\x01\x00\x00")

func dataDeniedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDeniedHtml,
		"data/denied.html",
	)
}

func dataDeniedHtml() (*asset, error) {
	bytes, err := dataDeniedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/denied.html", size: 269, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataExecuteHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\x16\x3c\xb5\x87\x8a\x6d\xd0\x43\x51\x50\x2e\x0a\x34\x7d\x5c\xd2\x67\x3e\x80\x32\x27\x12\x01\x89\x74\x97\x94\x1d\x23\xd0\xbf\x17\x12\xed\x5a\xf4\x4b\x27\x91\xbb\x3b\x3b\x33\xbb\xa0\x6a\x62\xd7\x2e\x6e\x88\x88\x54\x03\x6d\xd2\xef\x74\x8c\x36\xb6\x58\xdc\x3d\x61\xd9\x47\x28\x99\x8e\x29\x53\x1e\x52\x55\xe5\xcd\x76\x56\xb5\xda\x57\xd0\xdf\x1e\xbc\x25\x5d\x6b\xeb\x42\x24\x55\x2d\x9e\x9f\xa9\x08\xe0\xb5\x5d\xa2\xb8\xd7\x1d\x68\x18\xe8\x15\xbd\x98\x5f\x7f\x79\xf8\xf6\x89\x86\xe1\xa5\x92\xd5\xe2\x83\x92\xab\x19\x70\xc3\x72\x7e\xba\x5d\xfc\x1c\xf1\x95\x6c\x6e\xf3\xee\x2e\x82\x29\x36\xfb\xfe\xd1\x13\x12\xa1\x82\xee\x7d\x04\x85\x7e\xd9\x4c\x31\x8b\x40\x9d\xde\x52\x05\x6a\x7d\x5d\xc3\x90\x76\x86\x18\x6b\x8b\x0d\x4c\x91\x77\x7f\xf4\xdc\x51\x87\xd8\x78\x53\x8a\x1f\xdf\x7f\xff\x11\x87\xe0\xf8\x8d\x22\x96\x81\x1f\x3f\x5b\xb4\x86\x86\x21\x0b\x2a\xeb\x56\x7d\xa4\xb8\x5d\xa1\x14\x8d\x35\x06\x4e\x90\xd3\x1d\x4a\xb1\x13\x5e\x59\x67\xac\xab\x05\xad\x75\xdb\xa3\x14\x67\x3c\x11\x24\xf3\x96\x2a\xe2\x29\x6a\x86\xde\x41\x4d\x7a\x05\xb1\xdf\x94\xe2\xad\xa0\xa5\x6f\x43\x29\xde\xbd\x16\x93\xef\xc9\x8c\x61\x50\x72\x5f\x75\x04\x56\xf1\x31\xfe\x43\x00\x8f\xc8\xef\x27\x71\x7d\x00\x17\x77\x9d\xb6\xed\x47\x63\x18\x21\x8c\xd3\xcb\x84\x85\xbe\xea\x6c\xfc\x2f\x61\xb7\x06\x19\x6d\x25\x47\x1f\xb3\xa1\x66\xe1\x15\x63\x62\xdb\x21\x04\x5d\x63\xe2\x3b\xde\xdd\xcc\x6c\x66\xed\x6a\x50\xc1\x08\x7d\x1b\xc3\x89\xd5\x51\x57\x2d\xa8\xf2\x6c\xc0\xa5\x78\x73\x34\xa6\x94\xc2\xa7\x97\x39\xf8\x57\x68\x03\x3e\x01\xcf\x51\x9a\x89\x6a\xf2\xb4\xb9\x88\x08\x77\xb2\x0e\xc9\x89\x73\x2c\x0e\x0c\x7e\xf9\xcd\xc5\xf6\x17\x05\xe4\x10\xd7\xd8\x27\x18\x33\x53\x60\xae\x42\x5e\x50\x71\x55\xc9\x99\x1a\x25\xa7\xf1\x64\xf3\x3c\x4a\x9b\xad\x84\x92\xe9\x6d\x51\x32\x3d\x52\xff\x02\x00\x00\xff\xff\x17\x97\x5d\xc2\xac\x04\x00\x00")

func dataExecuteHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataExecuteHtml,
		"data/execute.html",
	)
}

func dataExecuteHtml() (*asset, error) {
	bytes, err := dataExecuteHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/execute.html", size: 1196, mode: os.FileMode(420), modTime: time.Unix(1542089755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x4a\x2c\x31\x10\x45\xf7\xef\x2b\xee\xeb\x95\x82\x4c\x70\x5f\x13\x11\x19\x71\x31\x7f\x20\x2e\xa2\xc9\xa4\x0b\x6a\xba\x9a\xa4\x1a\x1c\xc7\xf9\x77\xb1\x83\x76\x83\xab\xe4\x5e\x4e\x0e\xa9\xa2\xde\x8e\xe2\xff\x01\x00\xf5\x29\xc4\x76\x9d\xa3\xb1\x49\xf2\xbb\xf7\x51\x8b\xc1\x54\x85\x5c\xab\x1a\xed\x16\x9c\x5e\x35\x9e\x56\x2f\x47\xff\xc4\x38\x9f\xb1\x99\x6a\x2a\x9b\xdd\x31\xb0\xdc\xc7\x58\x52\xad\xb8\x5c\x6e\x70\xd2\x09\xa1\x24\x88\xe6\x9c\x22\x78\xf8\x8f\x67\x50\x40\x5f\xd2\x61\xdb\x39\xd1\xac\x93\x75\x7e\x3f\x9f\xb8\xb2\x9e\xeb\x35\xb9\xe0\xf1\xf9\x87\xba\x7b\x3b\x6c\x6f\x7f\xd1\x87\xc7\x19\x7b\x21\x37\xae\x7e\x33\xc9\x12\xe6\x42\xd8\x2f\x1e\x2d\xb9\x76\x7e\xcf\xd5\xa0\x25\x87\x81\x3f\x82\xb1\x0e\xf5\xdb\x44\x4e\x78\x25\x72\x3f\x26\x72\x6d\x60\x72\x6d\x7b\x5f\x01\x00\x00\xff\xff\x14\x1b\x01\xbb\x45\x01\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 325, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataJobHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xbd\x4e\x03\x31\x10\x84\x7b\x9e\x62\x74\x3d\x76\x95\x06\x6d\xdc\x50\x81\xa8\x78\x83\x5c\x6e\x2f\xe7\xe8\x6e\xd7\xf8\x16\x24\x64\xf9\xdd\x51\x62\x91\x1f\x4a\xba\xb1\x67\x34\xfb\xed\xd2\x64\xcb\x1c\x1e\x00\x80\x26\xde\x0d\x4d\x9e\x9f\x16\x6d\xe6\xf0\xaa\x3d\xf9\x26\x2f\x56\x29\x88\x23\x44\x0d\xee\xa8\xfd\x8b\x8c\xea\x9e\x75\x49\x33\x1b\xa3\xd6\x4b\xec\xdc\xb2\xb0\xed\x30\x99\xa5\x47\xfe\xf8\x8c\x5f\xdb\x2e\xf3\x98\x79\x9d\x3a\xec\x55\x8c\xc5\xb6\xdd\xa6\x83\xbf\x2b\x67\x19\x7e\x7b\xc8\x5f\xa9\xa8\xd7\xe1\xfb\x06\x30\x85\x37\x3d\x60\xd4\x8c\xa3\xf6\x4f\xe4\xd3\xad\x97\x39\x94\x72\xe5\x3b\x25\x6b\x25\x7f\xfa\xff\xd7\x1e\x29\xbc\x37\xf0\x28\x07\x44\xc1\x06\x2b\xef\x55\x86\xd5\x39\x77\x37\xfa\x2f\x7f\x83\x26\xdf\x0e\xfd\x13\x00\x00\xff\xff\x62\x90\x68\xa7\x70\x01\x00\x00")

func dataJobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataJobHtml,
		"data/job.html",
	)
}

func dataJobHtml() (*asset, error) {
	bytes, err := dataJobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/job.html", size: 368, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLogsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcb\x8e\xd3\x30\x14\xdd\xcf\x57\x5c\x79\x05\x0b\x62\x18\xb1\x40\xc8\x09\x62\x31\xc0\x6a\x78\xb3\x77\xea\x33\x8d\xa5\x24\x0e\xd7\xce\x74\xaa\x51\xfe\x1d\xc5\xee\xd0\x38\x9d\xb6\xab\xe6\x3e\xce\x3d\x8f\x28\xaa\x09\x5d\x5b\x5d\x11\x11\xa9\x06\xda\xa4\xbf\xf1\x31\xd8\xd0\xa2\xfa\x63\xb1\xa3\xd6\x6d\xbd\x92\xa9\x90\x66\xe5\x71\x58\xd5\xce\xec\x17\x7b\x43\x75\xf3\x80\xcd\x18\x10\xd7\xe8\xef\x08\xde\x93\xde\x6a\xdb\xfb\x40\xaa\xae\x1e\x1f\xa9\xd0\xc3\x50\xdc\xea\x0e\x34\x4d\xf4\x8a\x5e\x3c\x95\x3e\x8f\xd6\xd0\x34\xbd\x54\xb2\xae\x3e\x28\x39\x2c\x50\x1b\x96\xcb\xa7\xeb\xea\xfb\x8c\xab\x64\x73\x9d\x9f\xee\x03\x98\x42\x83\xc3\xdd\xe0\x08\x89\x4d\x41\xb7\x2e\x80\xfc\xb8\x69\x62\xcf\xc2\x53\xa7\xf7\x54\x47\x9e\x5b\x18\xd2\xbd\x21\xc6\xbd\xc5\x0e\xa6\xc8\xaf\xdf\x39\xee\xa8\x43\x68\x9c\x29\xc5\xb7\xaf\x3f\x7f\x89\x63\x73\xfe\xcd\x02\x36\x9e\xef\x3e\x59\xb4\xb3\x82\xac\xa9\x6c\x3f\x8c\x81\xc2\x7e\x40\x29\x1a\x6b\x0c\x7a\x41\xbd\xee\x50\x0a\x3d\x0c\x82\xee\x75\x3b\xa2\x14\x2b\x13\x04\xc9\xfc\x86\x0a\x78\x08\x9a\xa1\x0f\xbb\x51\xa0\x20\x76\xbb\x52\xbc\x15\xb4\x71\xad\x2f\xc5\xbb\xd7\x22\x1a\x9c\xd4\x4f\x93\x92\x4f\x5b\x2b\xb0\x9a\xd7\xf8\xbf\x3d\x78\x46\x7e\x1f\xd5\x8c\x1e\x5c\xdc\x74\xda\xb6\x1f\x8d\x61\x78\x3f\x47\x95\x29\xf1\x63\xdd\xd9\xf0\x9f\xfe\x21\xf4\x8c\xb6\x92\xb3\x71\x59\x8a\x59\x7b\x60\x44\xb6\x1d\xbc\xd7\x5b\x44\xbe\x73\xed\x6a\xe1\x2b\xeb\x7e\x0b\x2a\x18\x7e\x6c\x83\x3f\xf1\x36\xe8\xba\x05\xd5\x8e\x0d\xb8\x14\x6f\x56\xb9\xa4\x11\x3e\x2d\xe6\xe0\x5f\xa0\x0d\xf8\x04\x3c\x47\x69\x22\xd5\xe4\x69\x73\x16\x11\xfd\x49\xfe\xc9\x89\xe7\x58\x1c\x19\xfc\x70\xbb\xb3\xe7\xcf\x0a\xc8\x21\x2e\xb1\x4f\x30\x66\xa1\xc0\x5c\x84\x3c\xa3\xe2\xa2\x92\x67\x76\x94\x8c\xf1\x64\x79\xae\xc6\x16\xaf\x84\x92\xe9\x4b\xa2\x64\xfa\x28\xfd\x0b\x00\x00\xff\xff\x7a\x3d\x50\x44\x9c\x04\x00\x00")

func dataLogsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLogsHtml,
		"data/logs.html",
	)
}

func dataLogsHtml() (*asset, error) {
	bytes, err := dataLogsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/logs.html", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1549594521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOperationsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x8f\xdb\x36\x10\xbd\xf7\x57\x0c\x74\x6a\x01\xdb\x4a\x73\x2a\x0a\x59\x45\xd0\x24\x45\x81\x36\xbb\xe9\x6e\xd1\xf3\x48\x1a\x99\x8c\x29\x8e\xca\x19\xd9\x2b\x04\xfe\xef\x05\x25\x59\xfe\x4a\x1a\x6c\x80\xa2\x3e\x18\xa2\xc8\x19\x3e\x3e\xbe\xf7\xa0\xcc\x68\xe3\xf2\x6f\x00\x00\x32\x43\x58\x8d\x8f\xc3\x50\xad\x3a\xca\xef\x5a\x0a\xa8\x96\xbd\x64\xe9\xf8\x66\x5c\x9c\x9e\x56\x67\x05\x57\xfd\x59\x61\x9b\xff\x65\x50\x61\xcf\x9d\xab\xa0\xe7\x0e\x9c\xdd\x12\x28\x43\xc5\xf1\x3f\x2b\xf2\x8f\x1f\x61\x25\x14\x76\xb6\xa4\xd5\x3b\x6c\x08\x0e\x07\x58\xc2\xb7\xe7\xaf\x7f\xf9\xf3\xd7\xd7\x70\x38\x7c\x97\xa5\x45\xfe\x53\x96\xb6\x67\xfd\x4d\x48\xcf\x47\x2f\xf3\x47\xdc\x12\xb4\x1c\x14\x0b\x47\x20\x1e\x5b\x31\xac\x59\x6a\x5e\x5e\xa0\xfa\xd9\xd9\x72\x0b\x6a\x08\x6a\x76\x8e\xf7\xd6\x6f\x22\x1e\x51\x0c\x0a\x08\x1f\xb8\x88\x43\x8d\xcd\x70\xee\x02\x5c\x83\x1a\x2b\x50\xa1\x62\x81\x42\x2b\x78\x8c\xc3\x79\x7e\x6f\x9d\x83\x82\x40\x70\x47\x15\x50\x6b\xa8\xa1\x80\xce\xf5\x0b\x40\x5f\x41\xd7\xb2\x07\xe9\xca\x92\x44\x06\x32\x8e\xeb\xad\x48\x47\x15\xec\xad\x9a\xb8\x9d\xe1\xa0\x4b\x67\x63\x8f\x82\x30\x50\x00\xe5\x2d\x79\xd0\x48\x65\x89\x3e\x96\x74\x42\x55\x84\x18\x48\x94\x03\x8d\xb8\x4e\x40\x3d\xa0\x67\x35\x14\x40\x7a\x51\x6a\x56\x97\xb4\xb5\xf9\xab\x5a\x29\x1c\x37\x83\x96\x82\xe5\x6a\x38\x9f\x6d\x68\x71\x3a\xe5\x0c\xb1\x22\x47\x4a\xd5\x0a\x5e\x39\xe1\x05\xd8\x7a\xbc\x4d\x16\x8a\x0f\x13\xc2\xc5\xc0\xe8\xa9\xce\xb3\xc6\x5a\x1c\x4e\x6c\xe3\x85\x44\x1a\x10\x3c\xed\xaf\x48\xf3\x34\x1e\xa7\xa0\x81\x74\x7f\x83\xf7\xdd\xdd\xe3\x9b\x05\xa0\x53\xc3\xdd\xc6\x9c\x6e\xb8\x21\xf4\x23\x99\x91\x98\x86\x77\x13\x15\xca\x33\x03\xe4\x77\x36\xb0\x6f\xc8\xeb\x02\x8a\x4e\x4f\xd8\x4a\xf6\x3b\x0a\x0a\xbf\xf7\x0f\xef\x7f\x8b\x25\xf7\x2c\xba\x09\x24\xc0\x01\xa2\xf4\x96\x3b\x0a\x82\x57\x60\x6a\x0e\x0d\x34\xa4\x86\xab\x75\x72\x7f\xf7\xf0\x98\x00\x96\xd1\x16\xeb\x24\xb5\xde\xaa\x45\xa5\xf4\x78\xbc\xe4\x54\x18\x7f\x51\xd6\xa5\x84\xfa\xad\x25\x57\xc1\xe1\x70\x31\x99\x59\xdf\x76\x0a\xda\xb7\xb4\x4e\x8c\xad\x2a\xf2\x09\x78\x6c\x68\x9d\x4c\x56\x28\xac\xaf\xac\xdf\x24\xb0\x43\xd7\xd1\x3a\xf9\x84\x4b\x12\x48\x2f\xb7\x7c\x4d\xa2\x3f\x5e\xee\x23\xe4\xa8\xd4\xa9\x35\x3d\x45\x32\x1d\x97\x83\xb5\xaf\xf0\x4e\x98\x03\xfa\x0d\xc1\xea\x72\xa9\x5c\xe3\x9f\xfb\x73\x1b\xe7\xcf\x41\x46\x60\xf9\xf4\x90\xa5\xe3\xfc\x27\x77\x22\x7f\x4b\x4b\x3a\xe2\xcd\x3f\x4f\x96\x74\x45\x63\x75\xa6\xe5\x61\xb0\xf1\x4d\x0a\x44\x5b\x5f\xd0\x93\xa5\xf1\x2e\x2f\xe2\x04\xae\xf2\xe4\x8f\xc9\x5f\x5f\x8e\x94\x7b\x14\x8d\x69\x31\x7a\xb5\x20\xc7\xfb\xd1\xb1\x06\x05\x0a\x22\x0f\x1b\xf2\x31\x40\x09\xea\xc0\xcd\x79\xae\x7c\xe0\x62\x01\xd6\x97\xae\x8b\xb7\x7b\xee\xde\x33\xed\xde\x58\x62\xc8\x9e\x41\xcb\x5b\x5b\x6e\x97\x5c\xd7\xa7\xe4\x3a\xc5\xc2\xe4\xc7\x96\xad\xd7\xc9\x63\xfd\xf0\x7a\xc0\xf9\x19\x9f\xe9\xdc\x9a\x77\x14\xf6\xc1\xc6\x93\xf9\x7e\x6c\x85\x2e\x10\x56\x3d\x58\x7f\x99\x86\x0b\x10\x86\xd6\x11\x0a\x45\x1f\x97\x18\xa8\xee\xdc\xd7\x98\x67\x42\xff\x2c\xef\x28\x3d\x29\x06\xc2\x49\xd5\xc3\xe9\x12\x28\xd9\xc9\x3a\xf9\xe1\x45\x02\x81\xf7\xb2\x4e\xbe\x7f\x91\xe4\x59\x7a\x5c\x7b\xa5\xa8\x22\x5c\x7b\xe7\xbf\x71\xe4\x97\xa5\x3b\x2b\xe3\xc8\xc4\x33\x55\x7b\x1f\xac\x57\x78\x28\x0d\x35\x78\x23\xd4\xb7\x1c\x40\xba\x36\x2a\x9a\xaa\xf9\xf6\x64\x31\xeb\x53\x06\x7d\xc8\x50\xfd\x55\xd9\x37\x54\xfe\xff\xc9\xf7\x6f\x3c\x8f\x0c\x4d\x48\x9f\xc9\xee\x9b\x27\x2a\x3b\x25\xf8\xbb\xa3\xd0\xdf\xd0\x7b\x3e\x6b\x49\x00\x37\x68\xbd\xe8\x6c\xc5\x48\x36\x2c\x8f\x46\xe9\x84\x60\x47\xa1\x3f\xda\xc5\xf5\x37\x96\xcc\x10\x4c\xa0\x3a\x26\xf5\xd0\x39\xc9\xdf\xc7\x8d\x61\x1c\xc6\xa0\x6d\x71\x43\x59\x8a\xf9\xf5\xb7\xd1\x11\x78\x96\x8e\x9f\x65\x59\x3a\x7e\xe2\xfd\x13\x00\x00\xff\xff\x86\x28\x7d\x4c\xea\x09\x00\x00")

func dataOperationsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataOperationsHtml,
		"data/operations.html",
	)
}

func dataOperationsHtml() (*asset, error) {
	bytes, err := dataOperationsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/operations.html", size: 2538, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOrgsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xbb\x8e\xc3\x20\x10\xec\xef\x2b\x56\xfe\x00\x6f\x7f\xda\xa3\xbd\xee\xae\x4c\xbd\x09\x6b\x40\xc2\x60\x01\x56\x94\x20\xfe\x3d\x72\x50\x64\x47\xa1\x9a\x19\x66\xf6\x45\xb6\xcc\x5e\x7d\x01\x00\x90\x15\xd6\x1d\x3e\x69\x71\xc5\x8b\xfa\x4f\x86\x83\xbb\x73\x71\x31\x64\xc2\x2e\x76\x3f\xee\x01\x3a\x47\x7d\x3b\x64\x17\x75\x12\x98\xe2\x1a\x34\x14\xbb\x21\xef\xe3\xd5\x05\x03\x31\x99\x6f\xc2\xe5\x60\x5d\xfd\x4e\xb6\x57\x2b\x24\x0e\x46\x60\x8c\xc9\x64\x68\xed\xed\x97\xbc\x53\xc4\x60\x93\x4c\x3f\x03\xc6\x64\xb0\x56\x18\x7f\x57\xa7\xa1\x35\xcc\x0b\x5f\x24\x0f\x6a\xd3\xfe\x78\x16\x68\x8d\x90\x15\xa1\x77\x1f\x4d\x24\xe8\x63\x71\xc2\xd7\x20\x84\x7d\x19\xc2\x7e\x9b\x47\x00\x00\x00\xff\xff\xbc\x72\x1f\x6b\x23\x01\x00\x00")

func dataOrgsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataOrgsHtml,
		"data/orgs.html",
	)
}

func dataOrgsHtml() (*asset, error) {
	bytes, err := dataOrgsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/orgs.html", size: 291, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataServicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x4f\x43\x21\x10\x84\xef\xfe\x8a\x49\x4f\x7a\xb0\x7b\x37\x2b\x27\x13\xe3\xc5\x8b\x31\x9e\xa9\x6c\x1f\x9b\x50\x78\xe1\x51\x8d\x21\xfc\x77\xf3\xa4\x4d\x31\xe5\x34\x43\xbe\x81\xd9\x65\x5f\x0e\xc1\xdc\x00\x00\x7b\xb1\xae\xcb\x3f\x5b\xb4\x04\x31\x6f\x92\xbf\xf4\x53\x16\xa6\xee\x3b\x4a\x17\x96\x77\xc9\xfd\x0c\xb1\xd9\x7c\x08\xf6\xe9\x18\x1d\x8a\x5f\x55\x08\xe9\x5b\xe3\x84\xe5\xf4\xd2\x03\xd3\x3c\xf0\xc7\x70\x31\xeb\xa9\x15\xd9\xc6\x49\xb0\x3d\x07\xd0\xda\x3f\x82\x83\x1a\xb6\xf0\x59\xf6\x8f\x1b\x3a\x51\x3b\x8d\x4e\xe3\x44\xb5\x62\xfb\xfc\xfe\xf2\x84\xd6\x28\xcd\x92\x6d\xd1\x14\x97\x8d\x59\xef\x5f\xed\x41\xd0\x1a\xee\x71\x3b\x60\x77\x4c\xd6\x30\x05\xbd\xea\x21\xd1\x8d\x7f\x33\x9d\xbb\x32\xf5\xa1\x99\xfa\xfa\x7e\x03\x00\x00\xff\xff\x5e\xa5\x61\x7a\x46\x01\x00\x00")

func dataServicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataServicesHtml,
		"data/services.html",
	)
}

func dataServicesHtml() (*asset, error) {
	bytes, err := dataServicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/services.html", size: 326, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSpacesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3d\xae\xc3\x20\x10\x84\xfb\x77\x8a\x91\x0f\xe0\xed\x9f\x36\xb4\xe9\xd2\xa4\x48\x4d\xc2\xda\x20\x61\x8c\x6c\xac\x28\x42\xdc\x3d\xb2\x51\x64\x47\xa1\x9a\x81\x8f\xd9\x1f\xb6\x69\xf0\xea\x0f\x00\xd8\x8a\x36\x55\x6e\x36\xb9\xe4\x45\x5d\xa3\x7e\xc8\xcc\x54\x5d\x05\x69\x27\xf9\x3e\x9a\xd7\xe1\x53\x54\x37\x41\x37\x2e\xc1\x20\xd9\x55\x79\x3f\x3e\x5d\xe8\x31\x6f\x39\xff\x4c\xf1\x40\x2f\x7e\x37\xeb\xc9\x19\x93\x0e\xbd\xa0\xad\x38\x4a\xf9\x7a\x67\xef\x14\x6b\xd8\x49\xba\x53\x43\x1b\x43\x39\xa3\x3d\x2f\xce\xa0\x14\xd2\x31\xce\x8d\x5a\x6f\x2e\x7a\x10\x94\xc2\xa4\x15\x93\x77\x3f\x65\x24\x98\x63\x38\xd3\xa7\x15\xa6\x3a\x11\x53\xdd\xcc\x3b\x00\x00\xff\xff\x9c\x21\xae\x3e\x21\x01\x00\x00")

func dataSpacesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSpacesHtml,
		"data/spaces.html",
	)
}

func dataSpacesHtml() (*asset, error) {
	bytes, err := dataSpacesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/spaces.html", size: 289, mode: os.FileMode(420), modTime: time.Unix(1542088599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/apps.html": dataAppsHtml,
	"data/denied.html": dataDeniedHtml,
	"data/execute.html": dataExecuteHtml,
	"data/index.html": dataIndexHtml,
	"data/job.html": dataJobHtml,
	"data/logs.html": dataLogsHtml,
	"data/operations.html": dataOperationsHtml,
	"data/orgs.html": dataOrgsHtml,
	"data/services.html": dataServicesHtml,
	"data/spaces.html": dataSpacesHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"apps.html": &bintree{dataAppsHtml, map[string]*bintree{}},
		"denied.html": &bintree{dataDeniedHtml, map[string]*bintree{}},
		"execute.html": &bintree{dataExecuteHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"job.html": &bintree{dataJobHtml, map[string]*bintree{}},
		"logs.html": &bintree{dataLogsHtml, map[string]*bintree{}},
		"operations.html": &bintree{dataOperationsHtml, map[string]*bintree{}},
		"orgs.html": &bintree{dataOrgsHtml, map[string]*bintree{}},
		"services.html": &bintree{dataServicesHtml, map[string]*bintree{}},
		"spaces.html": &bintree{dataSpacesHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

